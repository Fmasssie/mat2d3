function d3ify(figureHandle, saveFileName)
% Transliterate a matlab figure into a d3 visualization 
if nargin < 2
    saveFileName = 'd3ifyFigure';
end;
if nargin < 1
    figureHandle = gcf;
end;


axisHandle = get(figureHandle, 'Children');
lineSeriesHandle = get(axisHandle(1), 'Children');

% write x and y data to a csv
fid = fopen([saveFileName, 'Data.csv'],'w');
fprintf(fid,'%s\r\n','x1,y1');
fclose(fid);
dlmwrite([saveFileName, 'Data.csv'], ...
    [get(lineSeriesHandle, 'XData')' get(lineSeriesHandle, 'YData')'], ...
    '-append', 'delimiter',',');


% create a javascript file containing the d3 code
fid = fopen([saveFileName, '.js'], 'w');

% The next chunk of code is responsible for setting up the axes
% d3 figure size
fprintf(fid, ['var margin = ', ...
    '{top: 20, right: 80, bottom: 80, left: 80},\n\t',...
    'width = 960 - margin.left - margin.right,\n\t',...
    'height = 500 - margin.top - margin.bottom;\n\n']);

% x-axis scale
xLims = get(axisHandle, 'xLim');
fprintf(fid, ['var xScale = d3.scale.linear()\n\t', ...
    '.domain([%8.3f, %8.3f])\n\t', ...
    '.range([0, width]);\n\n'], xLims(1), xLims(2));

% y-axis scale
yLims = get(axisHandle, 'yLim');
fprintf(fid, ['var yScale = d3.scale.linear()\n\t', ...
    '.domain([%8.3f, %8.3f])\n\t', ...
    '.range([height, 0]);\n\n'], yLims(1), yLims(2));

% x-axis
fprintf(fid, ['var xAxis = d3.svg.axis()\n\t', ...
    '.scale(xScale)\n\t', ...
    '.orient("bottom");\n\n']);

% y-axis
fprintf(fid, ['var yAxis = d3.svg.axis()\n\t', ...
    '.scale(yScale)\n\t', ...
    '.orient("left");\n\n']);

% create line
fprintf(fid, ['var line = d3.svg.line()\n\t', ...
    '.interpolate("linear")\n\t', ...
    '.x(function(d) { return xScale(d.x1); })\n\t', ...
    '.y(function(d) { return yScale(d.y1); });\n\n']);

% create svg 
fprintf(fid, ['var svg = d3.select("body").append("svg")\n\t', ...
    '.attr("width", width + margin.left + margin.right)\n\t', ...
    '.attr("height", height + margin.top + margin.bottom)\n\t', ...
    '.append("g")\n\t', ...
    '.attr("transform", "translate(" + margin.left + ","', ...
    ' + margin.top + ")");\n\n']);

% draw axis and axis labels
% x axis
fprintf(fid, ['svg.append("g")\n', ...
    '.attr("class", "axis")\n', ...
    '.attr("transform", "translate(0, " + height + ")")\n', ...
    '.call(xAxis)']);
% x axis label
if ~isempty(get(get(axisHandle, 'Xlabel'), 'string'))
    fprintf(fid, ...
        ['\n.append("text")\n', ...
        '.attr("x", width/2)\n', ...
        '.attr("y", height/10)\n', ...
        '.style("text-anchor", "middle")\n', ...
        '.text("%s");\n\n'], ...
        get(get(axisHandle, 'Xlabel'), 'string'));
else
    fprintf(fid, ';\n\n');
end;

%y axis 
fprintf(fid, ...
    ['svg.append("g")\n', ...
    '.attr("class", "axis")\n' ...
    '.call(yAxis)']);
% y axis label
if ~isempty(get(get(axisHandle, 'YLabel'), 'string'))
    fprintf(fid, ...
        ['\n.append("text")\n', ...
        '.attr("transform", "rotate(270)")\n', ...
        '.attr("y", -width/12)\n', ...
        '.attr("x", -(height)/2)\n', ...
        '.attr("dy", "1em")\n', ...
        '.style("text-anchor", "middle")\n', ...
        '.text("%s");\n\n'], ...
        get(get(axisHandle, 'Ylabel'), 'string'));
else
    fprintf(fid, ';\n\n');
end;



% load data
fprintf(fid, 'd3.csv("%s", function(mydata)\n{\n', ...
    [saveFileName,'Data.csv']);

% plot the data
if strcmp(get(lineSeriesHandle, 'LineStyle'), '-')
    fprintf(fid, ['\tsvg.append("path")\n', ...
        '\t.datum(mydata)\n', ...
        '\t.attr("class", "line")\n', ...
        '\t.attr("d", line);\n\n']);
end;

if strcmp(get(lineSeriesHandle, 'Marker'), '.')
    fprintf(fid, ['\tsvg.selectAll("circle")\n', ...
        '\t.data(mydata)\n', ...
        '\t.enter()\n', ...
        '\t.append("circle")\n', ...
        '\t.attr("class", "circle")\n', ...
        '\t.attr("cx", function(d) {\n\t', ...
        '\treturn xScale(d.x1);\n', ...
        '\t})\n', ...
        '\t.attr("cy", function(d) {\n\t', ...
        '\treturn yScale(d.y1);\n', ...
        '\t})\n', ...
        '\t.attr("r", %s);\n\n'], ...
        num2str(get(lineSeriesHandle, 'markerSize')));
end;

% close the tag from load data
fprintf(fid, '});');

% close the javascript file
fclose(fid);

% Now create a simple html file
fid = fopen('index.html', 'w');
fprintf(fid, ...
    ['<html>\n\t', ...
    '<head>\n\t\t', ...
    '<title> %s </title>\n\t\t', ...
    '<script type="text/javascript" src="d3/d3.v2.js"></script>\n\t\t', ...
    '<style type="text/css">\n\t\t'], saveFileName);

% axes css
fprintf(fid, ...
    ['.axis path,\n\t\t', ...
    '.axis line {\n\t\t\t', ...
    'fill: none;\n\t\t\t', ...
    'stroke: black;\n\t\t\t', ...
    'shape-rendering: crispEdges;\n\t\t', ...
    '}\n\n\t\t', ...
    '.axis text {\n\t\t\t', ...
    'font-family: Helvetica, Arial, sans-serif;\n\t\t\t', ...
    'font-size: 16px;\n\t\t', ...
    '}\n\n\t\t']);

% points css
circleFill = ['#', ...
    reshape(dec2hex(round(255 * get(lineSeriesHandle, 'Color')))', 1, 6)];
circleStroke = ['#', ...
    reshape(dec2hex(round(255 * get(lineSeriesHandle, 'Color')))', 1, 6)];
fprintf(fid, ...
    ['.circle {\n\t\t\t', ...
    'fill: %s;\n\t\t\t', ...
    'stroke: %s;\n\t\t', ...
    '}\n\n\t\t'], circleFill, circleStroke);

% line css
lineStroke = ['#', ...
    reshape(dec2hex(round(255 * get(lineSeriesHandle, 'Color')))', 1, 6)];
lineStrokeWidth = [num2str(get(lineSeriesHandle, 'LineWidth')), ' px'];
fprintf(fid, ...
    ['.line {\n\t\t\t', ...
    'fill: none;\n\t\t\t', ...
    'stroke: %s;\n\t\t\t', ...
    'stroke-width: %s;\n\t\t', ...
    '}\n\t\t'], lineStroke, lineStrokeWidth);

% close css tags and call the javascript    
fprintf(fid, ...
    ['</style>\n\t', ...
    '</head>\n\t', ...
    '<body>\n\t\t', ...
    '<div class="content">\n\t\t', ...
    '<script type="text/javascript" src="%s.js"></script>\n\t\t', ...
    '</div>\n\t', ...
    '</body>\n', ...
    '</html>', ...
    ], saveFileName);
fclose(fid);

    
% Created by Matt Best on 3/16/13

